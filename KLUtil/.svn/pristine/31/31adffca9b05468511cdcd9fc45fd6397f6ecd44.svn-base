#include <iostream>
#include <fstream>
#include <assert.h>
#include <vector>

using namespace std;

#ifndef GLOBALVAR_H
#define GLOBALVAR_H

//these all need to be changed for change in RANK

const int PRIME = 5; //7
const int RANK = 4; //7
const int MAX_WEYL_S_STR = 39; // Should be 39, but 41 works.
const int MAX_POLY_LENGTH = MAX_WEYL_S_STR*2+3; // ? //THIS MUST BE AN ODD NUMBER!!!
const int MAX_Mu_NUM = 622; // ?

const int w0Length = RANK*(RANK-1)/2; //(RANK*(RANK-1))/2
const char GraphFileName[13] = "graph-4.fil";
const int w0array[MAX_WEYL_S_STR] =
{1,2,1,3,2,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0}; //Leave for now.

const int alpharootarray[RANK][RANK-1] = { //Straightforward to change.
{1,1,1}, //Used for rho (half sum of all roots).
{2,-1,0},
{-1,2,-1},
{0,-1,2}
}; //For rank change, change alphas in weight.cpp (Not sure what this means?)

const int InverseMatrixForWeightToRootConversion[RANK-1][RANK-1] = { //Straightforward to change.
{3,2,1},
{2,4,2},
{1,2,3}};

//A note is needed on InverseMatrixForWeightToRootConversion.
//For RANK = 5, the matrix for root to weight conversion is just
//  2 -1  0  0
// -1  2 -1  0    = ROOTtoWEIGHT
//  0 -1  2 -1
//  0  0 -1  2
// and the inverse matrix for weight to root conversion is just that
// HOWEVER, MULTIPLY BY THE DET OF ROOTtoWEIGHT to get integers
// note: det of ROOtoWEIGHT is always RANK, so no entry needed for that

const int TopRootArray[RANK-1] = {8,12,12}; //Leave for now.
const int TopRootPowers[RANK-1] = {1521,117,9}; //Leave for now.


#endif

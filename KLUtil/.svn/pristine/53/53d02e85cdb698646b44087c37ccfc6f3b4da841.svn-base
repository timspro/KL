#include <iostream>
#include <fstream>
#include <assert.h>
#include <vector>

using namespace std;

#ifndef GLOBALVAR_H
#define GLOBALVAR_H

//these all need to be changed for change in RANK

const int PRIME = 8; //7
const int RANK = 8; //7
const int MAX_WEYL_S_STR = 200; // This is a guess.
//const int MAX_POLY_LENGTH = MAX_WEYL_S_STR*3+3; Unnecessary for this calculation.
//const int MAX_Mu_NUM = 7370; Unnecessary for this calculation.

const int w0Length = RANK*(RANK-1)/2; //(RANK*(RANK-1))/2
const char GraphFileName[13] = "graph-8.fil";
const int w0array[MAX_WEYL_S_STR] =
{1,2,1,3,2,1,4,3,2,1,
5,4,3,2,1,6,5,4,3,2,
1,7,6,5,4,3,2,1,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0}; //Leave for now.

const int alpharootarray[RANK][RANK-1] = { //Straightforward to change.
{1,1,1,1,1,1,1}, //Used for rho (half sum of all roots).
{2,-1,0,0,0,0,0},
{-1,2,-1,0,0,0,0},
{0,-1,2,-1,0,0,0},
{0,0,-1,2,-1,0,0},
{0,0,0,-1,2,-1,0},
{0,0,0,0,-1,2,-1},
{0,0,0,0,0,-1,2}}; //For rank change, change alphas in weight.cpp (Not sure what this means?)

const int InverseMatrixForWeightToRootConversion[RANK-1][RANK-1] = { //Straightforward to change.
{7,6,5,4,3,2,1},
{6,12,10,8,6,4,2},
{5,10,15,12,9,6,3},
{4,8,12,16,12,8,4},
{3,6,9,12,15,10,5},
{2,4,6,8,10,12,6},
{1,2,3,4,5,6,7}};

//A note is needed on InverseMatrixForWeightToRootConversion.
//For RANK = 5, the matrix for root to weight conversion is just
//  2 -1  0  0
// -1  2 -1  0    = ROOTtoWEIGHT
//  0 -1  2 -1
//  0  0 -1  2
// and the inverse matrix for weight to root conversion is just that
// HOWEVER, MULTIPLY BY THE DET OF ROOTtoWEIGHT to get integers
// note: det of ROOtoWEIGHT is always RANK, so no entry needed for that

#endif
